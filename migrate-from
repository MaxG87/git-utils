#!/usr/bin/env bash

set -eu

function print-usage() {
    cat <<EOF
$0: [OPTION]... [target-branch]

Follow a merge that was performed on a remote platform, e.g. GitHub or GitLab.
If HEAD is contained in the target branch, HEAD is switched to the target
branch and the source branch is deleted.

The target branch defaults to \`develop\`, \`main\`, or \`master\`, in that
order.

OPTIONS:

  -C DIRECTORY Execute git commands in DIRECTORY. Defaults to PWD.
  -f, --force  Skip checks when moving to target branch.
  -h, --help   Print this message and exit.

Examples:
follow-remote-merge
follow-remote-merge develop
follow-remote-merge -C ~/repos/some-repo -f weird-default-branch
EOF
}

function die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    echo "$msg" >&2
    exit "$code"
}

function main() {

    local workingDirectory=.
    local targetBranch

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h | --help)
                print-usage
                exit 0
                ;;
            -C)
                shift
                workingDirectory="$1"
                ;;
            -f | --force)
                die "Force intended but not yet supported!"
                ;;
            *)
                targetBranch="$1"
                ;;
        esac
        shift
    done

    test -d "$workingDirectory" ||
        die "Working directory $workingDirectory does not exist!"
    GIT_CMD="git -C $workingDirectory"

    if [[ ! -v targetBranch ]]; then
        targetBranch=$(get-default-target-branch)
    fi
    branch-exists "$targetBranch" ||
        die "Target branch $targetBranch does not exist!"

    migrate-from "$targetBranch"
}

function branch-exists() {
    $GIT_CMD show-ref --quiet refs/heads/"$1"
}

function get-default-target-branch() {
    for branch in develop main master; do
        if branch-exists $branch; then
            echo $branch
            return
        fi
    done
    echo "None of the default branches exist!" >&2
    exit 1
}

function migrate-from() {
    UUID="$(cat /proc/sys/kernel/random/uuid)"
    SRC_BRANCH="${UUID}/${2:-main}"
    git remote add "$UUID" "$1"
    git fetch "$UUID"
    git reset --hard "${SRC_BRANCH}"
    git remote remove "$UUID"
}

main "$@"
